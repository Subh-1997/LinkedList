1. Delete the Middle Node of a Linked List

class Solution {
    public ListNode deleteMiddle(ListNode head) {
        // Edge case: return nullptr if there is only one node.
        if (head.next == null)
            return null;
        
        // Initialize two pointers, 'slow' and 'fast'.
        ListNode slow = head, fast = head.next.next;
        
        // Let 'fast' move forward by 2 nodes, 'slow' move forward by 1 node each step.
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // When 'fast' reaches the end, remove the next node of 'slow' and return 'head'.
        slow.next = slow.next.next;
        return head;
   
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Reverse Nodes in k-Group

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
      if(head==null || k==1){
          return head;
      }
      ListNode dummy = new ListNode(0);
      dummy.next = head;

      ListNode curr=dummy , next=dummy, prev=dummy;

      int count=0;
      while(curr.next!=null){
          curr=curr.next;
          count++;
      } 

      while(count>=k){
          curr=prev.next;
          next=curr.next;
          for(int i=1;i<k;i++){
              curr.next=next.next;
              next.next=prev.next;
              prev.next=next;
              next=curr.next;
          }
          count-=k;
          prev=curr;
      } 
      return dummy.next; 
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Middle of the Linked List

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

       while(fast!=null && fast.next!=null){
           slow=slow.next;
           fast=fast.next.next;
       }
       return slow;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Reverse linked list 2.
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode leftpre = dummy;
        ListNode curr = head;

        for(int i = 0; i<left-1 ; i++){
            leftpre = leftpre.next;
            curr = curr.next;
        }

        ListNode sublisthead = curr;

        ListNode prev = null;
        for(int i = 0; i<=right-left ; i++){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next; 
        }

        leftpre.next = prev;
        sublisthead.next = curr;

        return dummy.next;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Reverse linked list

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;// newhead
        while(curr!=null){
          ListNode temp = curr.next;
          curr.next=prev;
          prev=curr;
          curr=temp; 
        }
        return prev;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Design Linked List
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Remove Nth Node From End of List

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
         ListNode start = new ListNode();
        start.next = head;
        ListNode fast = start;
        ListNode slow = start;     

        for(int i = 1; i <= n; i++)
            fast = fast.next;
    
        while(fast.next != null)
        {
            fast = fast.next;
            slow = slow.next;
        }
        
        slow.next = slow.next.next;
        
        return start.next;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Remove Duplicates from Sorted List

class Solution {
    public ListNode deleteDuplicates(ListNode node) {
      if(node==null){
          return node;
        }
        ListNode head = node;
        while(node.next!=null){
          if(node.val==node.next.val){
             node.next=node.next.next;
          }else{
            node=node.next;
          }
        }
        return head;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.
